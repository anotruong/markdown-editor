{"ast":null,"code":"var _jsxFileName = \"/Users/meillionatruong/Code/frontend_mentor/markdown-editor/frontend/src/shared/component/navigation/components/documentList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport DocItem from './docItem';\nimport './stylesheets/documentList.css';\n\n//This component will display a list of objects in a form of buttons/links\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DocumentList = props => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState();\n  const [loadedDocs, setLoadedDocs] = useState();\n\n  //Figure out a way to turn data fetched from backend and plugging them into clickable links or icons.\n\n  //the documents will be fetched by from the backend here and passed through DocumentLink.\n\n  useEffect(() => {\n    const sendRequest = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetch('http://localhost:5001/sideMenu');\n        const responseData = await response.json();\n        let list = responseData.documentsList;\n        let arrTest = [];\n        for (props of list) {\n          let object = JSON.parse(props);\n          arrTest.push(object);\n          // console.log(object)\n        }\n\n        console.log(arrTest);\n        if (!response.ok) {\n          throw new Error(arrTest.message);\n        }\n        setLoadedDocs(arrTest);\n      } catch (err) {\n        setError(err.message);\n      }\n      setIsLoading(false);\n    };\n    sendRequest();\n  }, []);\n  const errorHandler = () => {\n    setError(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"document-container\",\n    style: {\n      color: 'white'\n    },\n    children: !isLoading && loadedDocs && loadedDocs.map(obj => /*#__PURE__*/_jsxDEV(DocItem, {\n      items: obj\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(DocumentList, \"lb+nl+249n4eLVlvJEK1MfDtjgE=\");\n_c = DocumentList;\nexport default DocumentList;\nvar _c;\n$RefreshReg$(_c, \"DocumentList\");","map":{"version":3,"names":["React","useEffect","useState","DocItem","DocumentList","props","isLoading","setIsLoading","loadedDocs","setLoadedDocs","sendRequest","response","fetch","responseData","json","list","documentsList","arrTest","object","JSON","parse","push","console","log","ok","Error","message","err","setError","errorHandler","color","map","obj"],"sources":["/Users/meillionatruong/Code/frontend_mentor/markdown-editor/frontend/src/shared/component/navigation/components/documentList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport DocItem from './docItem';\n\nimport './stylesheets/documentList.css';\n\n//This component will display a list of objects in a form of buttons/links\nconst DocumentList = (props) => {\n  const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState();\n  const [loadedDocs, setLoadedDocs] = useState();\n\n  //Figure out a way to turn data fetched from backend and plugging them into clickable links or icons.\n\n  //the documents will be fetched by from the backend here and passed through DocumentLink.\n\n  useEffect(() => {\n    const sendRequest = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetch('http://localhost:5001/sideMenu');\n        const responseData = await response.json();\n        let list = responseData.documentsList;\n        let arrTest = [];\n\n        for (props of list) {\n          let object = JSON.parse(props)\n          arrTest.push(object);\n          // console.log(object)\n        }\n          console.log(arrTest)\n\n  \n        if (!response.ok) {\n          throw new Error(arrTest.message);\n        }\n  \n        setLoadedDocs(arrTest);\n      } catch(err) {\n        setError(err.message);\n      }\n      setIsLoading(false);\n\n    }\n    sendRequest();\n  }, [])\n\n  const errorHandler = () => {\n    setError(null);\n  };\n\n  return(\n    <div id='document-container' style={{color: 'white'}}>\n      {!isLoading && loadedDocs && loadedDocs.map(obj => \n        <DocItem items={obj} /> \n      )}\n    </div>\n  );\n}\n\nexport default DocumentList;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,WAAW;AAE/B,OAAO,gCAAgC;;AAEvC;AAAA;AACA,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAAA;EAC9B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EACjD;EACA,MAAM,CAACM,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,EAAE;;EAE9C;;EAEA;;EAEAD,SAAS,CAAC,MAAM;IACd,MAAMS,WAAW,GAAG,YAAY;MAC9BH,YAAY,CAAC,IAAI,CAAC;MAClB,IAAI;QACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,CAAC;QAC9D,MAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;QAC1C,IAAIC,IAAI,GAAGF,YAAY,CAACG,aAAa;QACrC,IAAIC,OAAO,GAAG,EAAE;QAEhB,KAAKZ,KAAK,IAAIU,IAAI,EAAE;UAClB,IAAIG,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACf,KAAK,CAAC;UAC9BY,OAAO,CAACI,IAAI,CAACH,MAAM,CAAC;UACpB;QACF;;QACEI,OAAO,CAACC,GAAG,CAACN,OAAO,CAAC;QAGtB,IAAI,CAACN,QAAQ,CAACa,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAACR,OAAO,CAACS,OAAO,CAAC;QAClC;QAEAjB,aAAa,CAACQ,OAAO,CAAC;MACxB,CAAC,CAAC,OAAMU,GAAG,EAAE;QACXC,QAAQ,CAACD,GAAG,CAACD,OAAO,CAAC;MACvB;MACAnB,YAAY,CAAC,KAAK,CAAC;IAErB,CAAC;IACDG,WAAW,EAAE;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMmB,YAAY,GAAG,MAAM;IACzBD,QAAQ,CAAC,IAAI,CAAC;EAChB,CAAC;EAED,oBACE;IAAK,EAAE,EAAC,oBAAoB;IAAC,KAAK,EAAE;MAACE,KAAK,EAAE;IAAO,CAAE;IAAA,UAClD,CAACxB,SAAS,IAAIE,UAAU,IAAIA,UAAU,CAACuB,GAAG,CAACC,GAAG,iBAC7C,QAAC,OAAO;MAAC,KAAK,EAAEA;IAAI;MAAA;MAAA;MAAA;IAAA,QAAG;EACxB;IAAA;IAAA;IAAA;EAAA,QACG;AAEV,CAAC;AAAA,GAnDK5B,YAAY;AAAA,KAAZA,YAAY;AAqDlB,eAAeA,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}