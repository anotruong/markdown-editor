{"ast":null,"code":"/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n */\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const includeImageAlt = (options || {}).includeImageAlt;\n  return one(value, typeof includeImageAlt === 'boolean' ? includeImageAlt : true);\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt) {\n  return node(value) && ('value' in value && value.value || includeImageAlt && 'alt' in value && value.alt || 'children' in value && all(value.children, includeImageAlt)) || Array.isArray(value) && all(value, includeImageAlt) || '';\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt);\n  }\n  return result.join('');\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object');\n}","map":{"version":3,"names":["toString","value","options","includeImageAlt","one","node","alt","all","children","Array","isArray","values","result","index","length","join","Boolean"],"sources":["/Users/meillionatruong/Code/frontend_mentor/markdown-editor/node_modules/mdast-util-to-string/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n */\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const includeImageAlt = (options || {}).includeImageAlt\n  return one(\n    value,\n    typeof includeImageAlt === 'boolean' ? includeImageAlt : true\n  )\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt) {\n  return (\n    (node(value) &&\n      (('value' in value && value.value) ||\n        (includeImageAlt && 'alt' in value && value.alt) ||\n        ('children' in value && all(value.children, includeImageAlt)))) ||\n    (Array.isArray(value) && all(value, includeImageAlt)) ||\n    ''\n  )\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,QAAQ,CAACC,KAAK,EAAEC,OAAO,EAAE;EACvC,MAAMC,eAAe,GAAG,CAACD,OAAO,IAAI,CAAC,CAAC,EAAEC,eAAe;EACvD,OAAOC,GAAG,CACRH,KAAK,EACL,OAAOE,eAAe,KAAK,SAAS,GAAGA,eAAe,GAAG,IAAI,CAC9D;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,GAAG,CAACH,KAAK,EAAEE,eAAe,EAAE;EACnC,OACGE,IAAI,CAACJ,KAAK,CAAC,KACR,OAAO,IAAIA,KAAK,IAAIA,KAAK,CAACA,KAAK,IAC9BE,eAAe,IAAI,KAAK,IAAIF,KAAK,IAAIA,KAAK,CAACK,GAAI,IAC/C,UAAU,IAAIL,KAAK,IAAIM,GAAG,CAACN,KAAK,CAACO,QAAQ,EAAEL,eAAe,CAAE,CAAC,IACjEM,KAAK,CAACC,OAAO,CAACT,KAAK,CAAC,IAAIM,GAAG,CAACN,KAAK,EAAEE,eAAe,CAAE,IACrD,EAAE;AAEN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,GAAG,CAACI,MAAM,EAAER,eAAe,EAAE;EACpC;EACA,MAAMS,MAAM,GAAG,EAAE;EACjB,IAAIC,KAAK,GAAG,CAAC,CAAC;EAEd,OAAO,EAAEA,KAAK,GAAGF,MAAM,CAACG,MAAM,EAAE;IAC9BF,MAAM,CAACC,KAAK,CAAC,GAAGT,GAAG,CAACO,MAAM,CAACE,KAAK,CAAC,EAAEV,eAAe,CAAC;EACrD;EAEA,OAAOS,MAAM,CAACG,IAAI,CAAC,EAAE,CAAC;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASV,IAAI,CAACJ,KAAK,EAAE;EACnB,OAAOe,OAAO,CAACf,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,CAAC;AACpD"},"metadata":{},"sourceType":"module","externalDependencies":[]}