{"ast":null,"code":"var _jsxFileName = \"/Users/meillionatruong/Code/frontend_mentor/markdown-editor/frontend/src/shared/component/navigation/components/newDocBtn.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState } from 'react';\nimport { MarkdownContext } from '../../../context/markdownContext';\nimport { markdownText } from '../../editor/components/introText';\nimport { useHttpClient } from '../../../hooks/http-hook';\nimport './stylesheets/newDocBtn.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewDocButton = () => {\n  _s();\n  // const { setIsLoading } = useContext(MarkdownContext);\n  // const [ setError ] = useState();\n  const {\n    isLoading,\n    error,\n    sendRequest\n  } = useHttpClient();\n  const newDocHandler = async () => {\n    //create a new doc and save. If there are changes made then user has to click 'saveDoc btn' to save changes\n\n    try {\n      await sendRequest('http://localhost:5001/sideMenu', 'POST', JSON.stringify({\n        title: 'untitled.md',\n        description: markdownText\n      }), {\n        'Content-Type': 'application/json'\n      });\n    } catch (err) {}\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"newDoc-container\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"newDoc-btn\",\n      onClick: newDocHandler,\n      children: \"+ New Document\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(NewDocButton, \"ZKCyPUyVtw4JZ2mV3j/kocFxJI4=\", false, function () {\n  return [useHttpClient];\n});\n_c = NewDocButton;\nexport default NewDocButton;\nvar _c;\n$RefreshReg$(_c, \"NewDocButton\");","map":{"version":3,"names":["React","useContext","useState","MarkdownContext","markdownText","useHttpClient","NewDocButton","isLoading","error","sendRequest","newDocHandler","JSON","stringify","title","description","err"],"sources":["/Users/meillionatruong/Code/frontend_mentor/markdown-editor/frontend/src/shared/component/navigation/components/newDocBtn.js"],"sourcesContent":["import React, { useContext, useState } from 'react';\nimport { MarkdownContext } from '../../../context/markdownContext';\nimport { markdownText } from '../../editor/components/introText';\nimport { useHttpClient } from '../../../hooks/http-hook';\nimport './stylesheets/newDocBtn.css';\n\nconst NewDocButton = () => {\n  // const { setIsLoading } = useContext(MarkdownContext);\n  // const [ setError ] = useState();\n  const { isLoading, error, sendRequest } = useHttpClient();\n\n  const newDocHandler = async () => {\n    //create a new doc and save. If there are changes made then user has to click 'saveDoc btn' to save changes\n\n    try {\n      await sendRequest(\n        'http://localhost:5001/sideMenu', \n        'POST', \n        JSON.stringify({\n          title: 'untitled.md',\n          description: markdownText\n        }),\n        {\n          'Content-Type': 'application/json'\n        },\n      );\n    } catch(err) {\n      \n    }\n  };\n\n  return (\n    <div id='newDoc-container'>\n      <button \n        id='newDoc-btn' \n        onClick={newDocHandler}\n      >+ New Document</button>\n    </div>\n  )\n};\n\nexport default NewDocButton;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AACnD,SAASC,eAAe,QAAQ,kCAAkC;AAClE,SAASC,YAAY,QAAQ,mCAAmC;AAChE,SAASC,aAAa,QAAQ,0BAA0B;AACxD,OAAO,6BAA6B;AAAC;AAErC,MAAMC,YAAY,GAAG,MAAM;EAAA;EACzB;EACA;EACA,MAAM;IAAEC,SAAS;IAAEC,KAAK;IAAEC;EAAY,CAAC,GAAGJ,aAAa,EAAE;EAEzD,MAAMK,aAAa,GAAG,YAAY;IAChC;;IAEA,IAAI;MACF,MAAMD,WAAW,CACf,gCAAgC,EAChC,MAAM,EACNE,IAAI,CAACC,SAAS,CAAC;QACbC,KAAK,EAAE,aAAa;QACpBC,WAAW,EAAEV;MACf,CAAC,CAAC,EACF;QACE,cAAc,EAAE;MAClB,CAAC,CACF;IACH,CAAC,CAAC,OAAMW,GAAG,EAAE,CAEb;EACF,CAAC;EAED,oBACE;IAAK,EAAE,EAAC,kBAAkB;IAAA,uBACxB;MACE,EAAE,EAAC,YAAY;MACf,OAAO,EAAEL,aAAc;MAAA,UACxB;IAAc;MAAA;MAAA;MAAA;IAAA;EAAS;IAAA;IAAA;IAAA;EAAA,QACpB;AAEV,CAAC;AAAC,GAjCIJ,YAAY;EAAA,QAG0BD,aAAa;AAAA;AAAA,KAHnDC,YAAY;AAmClB,eAAeA,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}