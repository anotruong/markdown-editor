{"ast":null,"code":"var _jsxFileName = \"/Users/meillionatruong/Code/frontend_mentor/markdown-editor/src/shared/component/darkmode/darkmode-btn.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { MarkdownContext } from '../../context/markdownContext';\n// import sun from '../../images/sunOn-moonOff.png';\n// import moon from '../../images/moonOn-sunOff.png';\n// import '../../images/moonOn-sunOff.png';\nimport '../editor/preview.css';\nimport '../darkmode/darkmode.css';\nimport './darkmode-btn.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DarkmodeBtn = _ref => {\n  _s();\n  let {\n    onClick\n  } = _ref;\n  const {\n    isToggled,\n    setToggle\n  } = useContext(MarkdownContext);\n\n  // const bgHandler = () => {\n  //   // !isToggled ? setSunMoonBG(moon) : setSunMoonBG(sun);\n\n  //   const setBackground = (img) => document.getElementById('darkmode-btn').style.backgroundImage = `url(${img})`;\n\n  //   !isToggled ? setBackground(sun) : setBackground(moon);\n  // }\n\n  const tagHandler = () => {\n    const generalTag = tagName => document.getElementsByTagName(tagName)[0];\n    let blockText = generalTag('blockquote');\n    let pCode = generalTag('p');\n    let preCode = generalTag('pre');\n    if (!isToggled) {\n      //lightmode\n      blockText.style.backgroundColor = 'white';\n      blockText.getElementsByTagName('p')[0].style.color = '#35393F';\n      pCode.getElementsByTagName('code')[0].style.color = 'black';\n      generalTag('a').style.color = '#35393F';\n      document.getElementsByTagName(\"body\").style.backgroundColor = '#151619';\n      // preCode.getElementsByTagName('code')[0].style.backgroundColor = '#F5F5F5';\n    } else {\n      // darkmode\n      blockText.style.backgroundColor = '#2B2D31';\n      blockText.getElementsByTagName('p')[0].style.color = 'white';\n      pCode.getElementsByTagName('code')[0].style.color = 'white';\n      generalTag('a').style.color = 'white';\n      document.getElementsByTagName('body')[0].style.backgroundColor = '#151619';\n      // preCode.getElementsByTagName('code')[0].style.backgroundColor = '#2B2D31';\n    }\n  };\n\n  const darkModeHandler = () => {\n    setToggle(!isToggled);\n    onClick(!isToggled);\n\n    // bgHandler();\n    tagHandler();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"darkmode-btn\",\n    className: !isToggled ? 'moonBG' : 'sunBG',\n    children: /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        defaultChecked: isToggled,\n        onClick: darkModeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(DarkmodeBtn, \"XeCTxbFcLVzR8DDDh7GHV52ylWM=\");\n_c = DarkmodeBtn;\nexport default DarkmodeBtn;\nvar _c;\n$RefreshReg$(_c, \"DarkmodeBtn\");","map":{"version":3,"names":["React","useContext","MarkdownContext","DarkmodeBtn","onClick","isToggled","setToggle","tagHandler","generalTag","tagName","document","getElementsByTagName","blockText","pCode","preCode","style","backgroundColor","color","darkModeHandler"],"sources":["/Users/meillionatruong/Code/frontend_mentor/markdown-editor/src/shared/component/darkmode/darkmode-btn.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { MarkdownContext } from '../../context/markdownContext';\n// import sun from '../../images/sunOn-moonOff.png';\n// import moon from '../../images/moonOn-sunOff.png';\n// import '../../images/moonOn-sunOff.png';\nimport '../editor/preview.css';\nimport '../darkmode/darkmode.css';\nimport './darkmode-btn.css';\n\nconst DarkmodeBtn = ({ onClick }) => {\n\n  const {isToggled, setToggle} = useContext(MarkdownContext);\n\n  // const bgHandler = () => {\n  //   // !isToggled ? setSunMoonBG(moon) : setSunMoonBG(sun);\n\n  //   const setBackground = (img) => document.getElementById('darkmode-btn').style.backgroundImage = `url(${img})`;\n\n  //   !isToggled ? setBackground(sun) : setBackground(moon);\n  // }\n\n  const tagHandler = () => {\n    const generalTag = (tagName) => document.getElementsByTagName(tagName)[0];\n    \n    let blockText = generalTag('blockquote');\n    let pCode = generalTag('p');\n    let preCode = generalTag('pre');\n\n\n    if (!isToggled) {\n      //lightmode\n      blockText.style.backgroundColor = 'white';\n      blockText.getElementsByTagName('p')[0].style.color = '#35393F';\n      pCode.getElementsByTagName('code')[0].style.color = 'black';\n      generalTag('a').style.color = '#35393F';\n      document.getElementsByTagName(\"body\").style.backgroundColor = '#151619';\n      // preCode.getElementsByTagName('code')[0].style.backgroundColor = '#F5F5F5';\n      \n    } else {\n      // darkmode\n      blockText.style.backgroundColor = '#2B2D31';\n      blockText.getElementsByTagName('p')[0].style.color = 'white';\n      pCode.getElementsByTagName('code')[0].style.color = 'white';\n      generalTag('a').style.color = 'white';\n      document.getElementsByTagName('body')[0].style.backgroundColor = '#151619';\n      // preCode.getElementsByTagName('code')[0].style.backgroundColor = '#2B2D31';\n    }\n  }\n\n  const darkModeHandler = () => {\n\n    setToggle(!isToggled);\n    onClick(!isToggled);\n\n    // bgHandler();\n    tagHandler()\n  }\n\n  return(\n    <div \n      id='darkmode-btn' \n      className={!isToggled ? 'moonBG' : 'sunBG' }\n    >\n\n      <label>\n        <input \n          type='checkbox' \n          defaultChecked={isToggled} \n          onClick={darkModeHandler} \n        />\n        <span />\n    </label>\n   </div>\n  )\n};\n\nexport default DarkmodeBtn;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,eAAe,QAAQ,+BAA+B;AAC/D;AACA;AACA;AACA,OAAO,uBAAuB;AAC9B,OAAO,0BAA0B;AACjC,OAAO,oBAAoB;AAAC;AAE5B,MAAMC,WAAW,GAAG,QAAiB;EAAA;EAAA,IAAhB;IAAEC;EAAQ,CAAC;EAE9B,MAAM;IAACC,SAAS;IAAEC;EAAS,CAAC,GAAGL,UAAU,CAACC,eAAe,CAAC;;EAE1D;EACA;;EAEA;;EAEA;EACA;;EAEA,MAAMK,UAAU,GAAG,MAAM;IACvB,MAAMC,UAAU,GAAIC,OAAO,IAAKC,QAAQ,CAACC,oBAAoB,CAACF,OAAO,CAAC,CAAC,CAAC,CAAC;IAEzE,IAAIG,SAAS,GAAGJ,UAAU,CAAC,YAAY,CAAC;IACxC,IAAIK,KAAK,GAAGL,UAAU,CAAC,GAAG,CAAC;IAC3B,IAAIM,OAAO,GAAGN,UAAU,CAAC,KAAK,CAAC;IAG/B,IAAI,CAACH,SAAS,EAAE;MACd;MACAO,SAAS,CAACG,KAAK,CAACC,eAAe,GAAG,OAAO;MACzCJ,SAAS,CAACD,oBAAoB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACI,KAAK,CAACE,KAAK,GAAG,SAAS;MAC9DJ,KAAK,CAACF,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAACI,KAAK,CAACE,KAAK,GAAG,OAAO;MAC3DT,UAAU,CAAC,GAAG,CAAC,CAACO,KAAK,CAACE,KAAK,GAAG,SAAS;MACvCP,QAAQ,CAACC,oBAAoB,CAAC,MAAM,CAAC,CAACI,KAAK,CAACC,eAAe,GAAG,SAAS;MACvE;IAEF,CAAC,MAAM;MACL;MACAJ,SAAS,CAACG,KAAK,CAACC,eAAe,GAAG,SAAS;MAC3CJ,SAAS,CAACD,oBAAoB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACI,KAAK,CAACE,KAAK,GAAG,OAAO;MAC5DJ,KAAK,CAACF,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAACI,KAAK,CAACE,KAAK,GAAG,OAAO;MAC3DT,UAAU,CAAC,GAAG,CAAC,CAACO,KAAK,CAACE,KAAK,GAAG,OAAO;MACrCP,QAAQ,CAACC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAACI,KAAK,CAACC,eAAe,GAAG,SAAS;MAC1E;IACF;EACF,CAAC;;EAED,MAAME,eAAe,GAAG,MAAM;IAE5BZ,SAAS,CAAC,CAACD,SAAS,CAAC;IACrBD,OAAO,CAAC,CAACC,SAAS,CAAC;;IAEnB;IACAE,UAAU,EAAE;EACd,CAAC;EAED,oBACE;IACE,EAAE,EAAC,cAAc;IACjB,SAAS,EAAE,CAACF,SAAS,GAAG,QAAQ,GAAG,OAAS;IAAA,uBAG5C;MAAA,wBACE;QACE,IAAI,EAAC,UAAU;QACf,cAAc,EAAEA,SAAU;QAC1B,OAAO,EAAEa;MAAgB;QAAA;QAAA;QAAA;MAAA,QACzB,eACF;QAAA;QAAA;QAAA;MAAA,QAAQ;IAAA;MAAA;MAAA;MAAA;IAAA;EACJ;IAAA;IAAA;IAAA;EAAA,QACH;AAET,CAAC;AAAC,GAjEIf,WAAW;AAAA,KAAXA,WAAW;AAmEjB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}